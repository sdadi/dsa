using Helpers;

namespace _1Advanced
{
    internal class _3_ArrayMergeIntervals
    {
        public static void NextPermutation()
        {
           List<int> A = [94, 444, 994, 508, 72, 125, 299, 181, 238, 354, 223, 691, 249, 838, 890, 758, 675, 424, 199, 201, 788, 609, 582, 979, 259, 901, 371, 766, 759, 983, 728, 220, 16, 158, 822, 515, 488, 846, 321, 908, 469, 84, 460, 961, 285, 417, 142, 952, 626, 916, 247, 116, 975, 202, 734, 128, 312, 499, 274, 213, 208, 472, 265, 315, 335, 205, 784, 708, 681, 160, 448, 365, 165, 190, 693, 606, 226, 351, 241, 526, 311, 164, 98, 422, 363, 103, 747, 507, 669, 153, 856, 701, 319, 695, 52
];

            ArrayExtension.PrintArray(A);
            Console.WriteLine("\n\n\n");
            int N = A.Count;

            int ind = -1;

            for(int i = N - 2; i >= 0; i--)
            {
                if (A[i] < A[i+1])
                {
                    ind = i;
                    break;
                }
            }
            if (ind == -1)
            {
                ArrayExtension.ReverseArray<int>(A, 0, N - 1);
                ArrayExtension.PrintArray(A);
                return;
            }

            for(int i = N - 1; i > ind; i--)
            {
                if (A[i] > A[ind])
                {
                    ArrayExtension.Swap<int>(A, i, ind);
                    break;
                }
            }
            ArrayExtension.ReverseArray(A,ind+1,N-1);
            ArrayExtension.PrintArray(A);
        }
        public static void NumberOf1s()
        {
            int A = 926;

            int ans = 0;

            for (int i = 1; i <= A; i *= 10)
            {
                ans += (A / (i * 10)) * i;
                ans += Math.Min(Math.Max(A % (i * 10) - i + 1, 0), i);
            }
            Console.WriteLine(ans);
        }
        public static void MergeIntervels()
        {
            List<List<int>> A = [[6037774, 6198243], [6726550, 7004541], [8842554, 10866536], [11027721, 11341296], [11972532, 14746848], [16374805, 16706396], [17557262, 20518214], [22139780, 22379559], [27212352, 28404611], [28921768, 29621583], [29823256, 32060921], [33950165, 36418956], [37225039, 37785557], [40087908, 41184444], [41922814, 45297414], [48142402, 48244133], [48622983, 50443163], [50898369, 55612831], [57030757, 58120901], [59772759, 59943999], [61141939, 64859907], [65277782, 65296274], [67497842, 68386607], [70414085, 73339545], [73896106, 75605861], [79672668, 84539434], [84821550, 86558001], [91116470, 92198054], [96147808, 98979097]];
            List<int> B = [36210193, 61984219];

            var result = new List<List<int>>();
            int N = A.Count;


            if (N == 0)
            {/* if A is empty */
                result.Add(B);
                MatrixExtensions.DisplayMatrix(A);
                return;
            }
            if (B[1] < A[0][0])
            { /* if B is before first and non overlapping  */
                A.Insert(0, B);
                MatrixExtensions.DisplayMatrix(A);
                return;
            }
            if (B[0] > A[N - 1][1])
            {/* if B is at the end and non overlapping */
                A.Add(B);
                MatrixExtensions.DisplayMatrix(A);
                return;
            }

            int i = 0;
            while (i < N)
            { /* initial non-overlapping */
                if (A[i][1] < B[0])
                {
                    result.Add(A[i]);
                }
                else
                {
                    break;
                }
                i++;
            }
            if (i < N)
            {
                int left = B[0];
                int right = B[1];
                while (i < N)
                { /* overlapping */
                    if (left > A[i][1] || A[i][0] > right)
                    {
                        break;
                    }
                    else
                    {
                        left = Math.Min(left, A[i][0]);
                        right = Math.Max(right, A[i][1]);
                    }
                    i++;
                }
                result.Add(new List<int>() { left, right });
            }

            while (i < N)
            { //remaining non-overlapping
                result.Add(A[i]);
                i++;
            }

            Console.WriteLine($"-----     start     -----{result.Count}");
            MatrixExtensions.DisplayMatrix(result);
            Console.WriteLine("-----     end     -----");
        }


        public static void FirstMissingPositive()
        {
            List<int> A = [699, 2, 690, 936, 319, 784, 562, 35, 151, 698, 126, 730, 587, 157, 201, 761, 956, 359, 198, 986, 915, 7, 703, 324, 814, 382, 294, 204, 120, 731, 615, 330, 486, 52, 223, 376, 649, 458, 564, 971, 72, 605, 177, 20, 461, 790, 872, 363, 916, 435, 991, 184, 410, 320, 16, 480, 768, 801, 117, 338, 650, 786, 17, 369, 979, 304, 445, 688, 862, 229, 311, 351, 985, 697, 135, 299, 310, 3, 643, 221, 831, 196, 887, 679, 484, 209, 824, 292, 588, 721, 140, 675, 827, 913, 271, 170, 812, 552, 334, 860, 981, 550, 308, 584, 442, 328, 251, 456, 976, 31, 507, 954, 982, 742, 45, 727, 794, 309, 527, 623, 56, 843, 436, 681, 143, 130, 689, 870, 362, 580, 560, 474, 385, 525, 881, 51, 890, 917, 820, 826, 139, 443, 978, 144, 512, 205, 682, 188, 344, 429, 497, 181, 749, 864, 664, 145, 621, 629, 886, 572, 89, 725, 945, 29, 553, 977, 783, 590, 236, 728, 125, 90, 492, 261, 543, 259, 662, 622, 285, 392, 561, 670, 200, 504, 246, 513, 910, 583, 460, 179, 207, 709, 127, 926, 816, 426, 520, 174, 464, 883, 780, 5, 268, 606, 1, 109, 704, 391, 661, 924, 516, 241, 477, 952, 405, 522, 247, 335, 356, 839, 423, 779, 4, 43, 720, 238, 965, 951, 914, 10, 496, 775, 651, 788, 373, 491, 746, 799, 518, 93, 86, 774, 652, 955, 494, 252, 781, 946, 412, 202, 741, 719, 612, 673, 896, 1000, 289, 554, 69, 424, 980, 506, 593, 889, 25, 959, 28, 736, 8, 969, 865, 657, 567, 434, 9, 167, 357, 929, 645, 250, 565, 94, 928, 473, 509, 823, 313, 762, -1, 208, 903, 922, 655, 948, 326, 485, 150, 73, 505, 225, 122, 129, 648, 838, 811, 972, 735, 78, 428, 740, 782, 632, 316, 440, 737, 297, 873, 281, 479, 654, 0, 633, 212, 152, 154, 470, 866, 79, 722, 958, 732, 900, 832, 278, 58, 842, 745, 540, 169, 347, 592, 438, 882, 462, 53, 34, 519, 489, 85, 757, 919, 701, 15, 211, 667, 637, 74, 573, 240, 559, -2, 472, 203, 112, 162, 776, -4, 155, 837, 99, 98, 64, 101, 983, 366, 853, 970, 482, 40, 921, 374, 758, 413, 339, 705, 771, 360, 734, 282, 219, 766, 535, 133, 532, 254];

            int N = A.Count;
            int result = N + 1;
            int i = 0;
            int count = 0;

            while (i < N)
            {
                while (A[i] > 0 && A[i] <= N && (A[i] != i + 1) && (A[i] != A[A[i] - 1]))
                {
                    int temp = A[A[i] - 1];
                    A[A[i] - 1] = A[i];
                    A[i] = temp;
                    count++;
                }
                count++;
                i++;
            }

            for (int j = 0; j < N; j++)
            {
                if (A[j] != j + 1)
                {
                    result = j + 1;
                    break;
                }
            }
            Console.WriteLine(result + " " + count);
        }
    }
}
