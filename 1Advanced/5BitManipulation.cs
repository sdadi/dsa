using System.Runtime.InteropServices.Marshalling;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.InteropServices.JavaScript.JSType;
using System.Text;

namespace _1Advanced
{
    internal class _5BitManipulation
    {
        /// <summary>
        /// Given an integer A. Two numbers, X and Y, are defined as follows:
        ///X is the greatest number smaller than A such that the XOR sum of X and A is the same as the sum of X and A.
        ///Y is the smallest number greater than A, such that the XOR sum of Y and A is the same as the sum of Y and A.
        ///Find and return the XOR of X and Y.

        ///NOTE 1: XOR of X and Y is defined as X ^ Y where '^' is the BITWISE XOR operator.
        ///NOTE 2: Your code will be run against a maximum of 100000 Test Cases.
        /// </summary>
        public static void StrangeEqualityOptimized()
        {
            /* solution is based on Math equation for bits "A+B = (A^B) + 2*(A&B)"
             in this case we need A+B = A^B which means A&B should be 0`1   A
             */
            int A = 1;

            int bcnt = 0;
            int x = 0;/* x should contain the bits set for which A bits are unset*/
            while (A > 0)
            {
                if (A % 2 == 0)
                    x |= (1 << bcnt);
                A /= 2;
                bcnt++;
            }
            int y = (1 << bcnt); /* Y is pow(2,bitcount) */

            Console.WriteLine((x ^ y));
        }
        public static void StrangeEquality()
        {
            int A = 1;

            int bcnt = 0;

            for (int i = 31; i >= 0; i--)
            {
                if ((A & (1 << i)) > 0)
                {
                    bcnt = i + 1;
                    break;
                }
            }
            int x = 0;
            for (int i = 0; i < bcnt; i++)
            {
                if((A& (1 << i)) == 0)
                {
                    x |= (1 << i);
                }
            }
            int y = (1 << bcnt);

            Console.WriteLine( (x ^ y));
        }
        public static void MinXORPair()
        {
            //List<int> A = [0, 2, 5, 7];//2
            List<int> A = [0, 4, 7, 9];//3
            A.Sort();
            int N = A.Count;
            int ans = int.MaxValue;
            for(int i = 1; i < N; i++)
            {
                int xor = (A[i] ^ A[i-1]);
                if (xor < ans)
                    ans = xor;
            }
            Console.WriteLine(ans);
        }
        public static void SumOfPairXORs()
        {
            //List<int> A = [1, 2, 3];//6
            //List<int> A = [3, 4, 2];//14
            List<int> A = [7652, 85495, 63108, 8466, 98239, 52482, 45709, 44168, 36189, 55055, 19443, 91001, 76979, 4730, 71455, 20388, 19389, 1956, 1661, 12427, 98459, 90416, 61472, 61205, 67406, 77255, 15805, 24266, 36287, 21653, 51211, 80122, 8249, 33482, 76681, 74422, 40298, 92249, 1016, 58901, 7462, 50428, 13181, 72529, 33028, 64942, 3937, 43527, 70559, 34319, 47921, 75995, 65782, 82532, 97053, 65713, 87244, 93845, 87165, 53973, 38280, 71086, 92263, 99604, 47639, 15454, 27003, 22465, 3301, 18842, 24568, 30385, 53896, 77659, 40451, 36543, 47669, 93340, 50471, 94825, 53480, 72445, 64336, 69713, 35585, 60131, 94831, 55228, 20514, 72661, 81273, 57015, 83090, 74432, 40008, 7981, 2364, 40917, 66872, 39762, 63281, 59910, 7563, 2811, 44130, 75596, 49542, 81988, 43015, 42148, 54194, 23657, 79642, 92749, 81116, 13741, 75356, 28875, 57365, 10390, 26704, 72648, 31410, 47278, 94299, 56910, 74733, 72772, 42251, 90317, 94530, 22313, 21996, 81147, 92851, 71124, 78772, 44912, 15077, 79326, 33208, 24806, 62817, 78215, 18421, 50399, 67059, 75887, 15656, 96830, 85774, 95069, 22806, 95980, 91143, 10460, 23077, 66549, 93782, 90105, 36321, 4585, 26744, 44870, 64632, 76475, 45679, 46395, 83966, 63973, 56832, 85711, 41642, 25634, 79060, 47235, 72311, 80467, 53688, 40536, 64516, 78299, 41149, 2547, 96149, 72547, 41688, 60960, 86703, 5175, 69123, 97740, 98112, 68134, 38906, 39690, 57844, 1094, 87007, 46543, 99041, 43501, 3799, 78999, 98396, 84985, 28587, 92445, 98562, 12810, 35880, 93350, 28625, 44259, 41887, 44311, 38027, 36620, 25669, 49691, 11674, 74514, 52436, 8894, 98534, 5254, 4553, 58804, 66721, 50778, 44324, 21363, 36348, 10055, 13643, 8532, 68879, 97642, 68199, 38614, 90709, 56130, 79621, 40411, 17389, 12340, 5174, 86698, 30778, 62631, 73711, 53995, 36772, 49417, 4778, 70478, 97237, 48296, 10244, 25828, 2237, 76729, 65021, 70756, 60495, 32788, 10203, 90312, 35106, 12629, 60071, 34989, 82160, 64541, 1037, 99607, 30394, 18288, 78049, 74922, 82434, 76757, 77749, 12562, 15983, 81721, 19172, 73052, 9837, 48332, 80427, 80187, 10954, 17282, 56330, 56036, 63226, 66195, 84903, 44466, 28053, 54779, 37163, 67010, 76436, 63323, 66659, 75640, 8439, 20054, 60832, 33945, 64929, 341, 51191, 687, 66874, 50308, 34114, 23336, 41100, 93138, 83326, 74935, 63367, 36309, 25259, 72146, 38942, 90980, 79727, 91826, 17128, 30843, 78867, 16502, 83135, 97594, 516, 90272, 94436, 28518, 59475, 37174, 40729, 50599, 69462, 77954, 74533, 29352, 84613, 50451, 47124, 69787, 73309, 88602, 10037, 43506, 64001, 59438, 38714, 87687, 92884, 42152, 91771, 79349, 32448, 38152, 14451, 41756, 32146, 28494, 70178, 69889, 19067, 49569, 93545, 3979, 76720, 71532, 87473, 56424, 49419, 65500, 29124, 19910, 99689, 82979, 20530, 83546, 8298, 86360, 47214, 43996, 45780, 91189, 78831, 79081, 16592, 63832, 21616, 67712, 44044, 45986, 45295, 87430, 40023, 25595, 86481, 33282, 35783, 34732, 11869, 7425, 49430, 90595, 96477, 65555, 15361, 91091, 59488, 42252, 59976, 24689, 34363, 50980, 96177, 70424, 63555, 82935, 7782, 10918, 35924, 43430, 91218, 5757, 49901, 10165, 83687, 33475, 12850, 53515, 97499, 96738, 56873, 46101, 4294, 24745, 71933, 92514, 89861, 33289, 57791, 84456, 37115, 38904, 82463, 77214, 35499, 93553, 83255, 71872, 86463, 95987, 52161, 41359, 58020, 30686, 35356, 98574, 65355, 43609, 41547, 4486, 30730, 87982, 12309, 96226, 86841, 23852, 76102, 82324, 10518, 78276, 95725, 16047, 28801, 36749, 91036, 77962, 18144, 68193, 78636, 24227, 29180, 12797, 50230, 72602, 80771, 91845, 11994, 57426, 98180, 99261, 43996, 99571, 98262, 60881, 77282, 97259, 16657, 6958, 49047, 12136, 92595, 8455, 22060, 86911, 34044, 63825, 21842, 32169, 83858, 82279, 85088, 1504, 17246, 85382, 27283, 13383, 99630, 15026, 27113, 81951, 85713, 39632, 15013, 93107, 63230, 21354, 58351, 31437, 9293, 83758, 96081, 55998, 34972, 74799, 8762, 27770, 27787, 90146, 64863, 40377, 82784, 45571, 36117, 54648, 2852, 1518, 71993, 83190, 51429, 57638, 73864, 47351, 9554, 98993, 30087, 95429, 19010, 36953, 97116, 88042, 589, 34125, 67122, 50038, 43057, 2398, 48250, 24671, 26382, 70626, 96261, 76380, 31563, 67477, 83626, 55690, 71727, 95987, 72166, 30503, 86088, 7743, 18327, 56538, 21256, 24416, 47649, 69801, 23138, 46398, 65097, 31232, 76498, 169, 83900, 49777, 56018, 71091, 81545, 32655, 3014, 26033, 17635, 91282, 61553, 40381, 98432, 6550, 3101, 92247, 27164, 70747, 5304, 6431, 35671, 90246, 89233, 47549, 56979, 23199, 44703, 24122, 74359, 86514, 86522, 59620, 77774, 50638, 96800, 59310, 70473, 25032, 72402, 52557, 30681, 26297, 54996, 96988, 36022, 9532, 62704, 1849, 1691, 98417, 27828, 63398, 53223, 45245, 72783, 13225, 38237, 93704, 45624, 85164, 87845, 30973, 27527, 3613, 29705, 50061, 80762, 66799, 90745, 11468, 33874, 23832, 85447, 19187, 15059, 9809, 66060, 63196, 18599, 87225, 705, 20938, 42812, 47634, 47623, 9662, 62689, 72514, 30847, 27171, 36237, 25044, 22515, 58851, 9816, 91637, 13675, 70927, 56320, 4631, 61369, 81499, 92486, 88113, 80046, 49279, 59374, 39516, 7810, 36727, 23459, 28088, 41648, 42724, 52464, 72133, 83959, 60842, 21672, 46955, 98586, 55088, 47039, 51058, 62593, 18594, 12494, 71946, 44694, 97906, 45651, 87429, 937, 60915, 94063, 90072, 99917, 63837, 98118, 64222, 99832, 39788, 3138, 45364, 87271, 72897, 38961, 70846, 82807, 18847, 5602, 72193, 6157, 94031, 8780, 83463, 35600, 64317, 12584, 29822, 9609, 86776, 68946, 17241, 66954, 15094, 93259, 34029, 59396, 32077, 44090, 63446, 46831, 4379, 93094, 78479, 88870, 49280, 5278, 18077, 68360, 76159, 95761, 4997, 43929, 17761, 22006, 86290, 88638, 27921, 27078, 59280, 50021, 56800, 27197, 73555, 15835, 31939, 10300, 27569, 63987, 50096, 43050, 3268, 98886, 76133];
            //540419488

            int N = A.Count;
            int mod = 1000000007;
            long ans = 0;

            for(int i = 0; i < 32; i++)
            {
                int sets = 0, unsets = 0;
                int pos = 1 << i;
                for(int j=0; j<N; j++)
                {
                    if ((A[j] & pos) > 0)
                        sets++;
                    else
                        unsets++;
                }
                ans += ( (sets*unsets*pos)) % mod;
            }
            Console.WriteLine(ans);
        }
        public static void FindMissing2Numbers()
        {
            List<int> A = [3, 2, 4];
            //List<int> A = [5, 1, 3, 6];

            int N = A.Count;
            int N2 = N + 2;

            var result = new List<int>();
            int aSum = 0;
            //int N2Sum = 0;
            int p = 0;
            int x=0, y=0;

            foreach (int i in A) /* XOR of array elements*/
                aSum ^= i;

            for (int i = 1; i <= N2; i++) /* XOR continuation for 1 to N+2*/
                aSum ^= i;

            //aSum ^= N2Sum;
            for(int i = 0; i < 32; i++)/* find first postion with set bit*/
            {
                if ((aSum&(1<<i)) > 0)
                {
                    p = i;
                    break;
                }
            }
            for(int i=0;i<N;i++) /* separate based on set and unset */
            {
                if ((A[i]&(1<<p)) == 0)
                {
                    x ^= A[i];
                }
                else
                    y^= A[i];

            }
            for (int i = 1; i <= N2; i++) /* continue separate based on set and unset */
            {
                if ((i & (1 << p)) == 0)
                {
                    x ^= i;
                }
                else
                    y ^= i;

            }
            Console.WriteLine($"[{x},{y}]");    
        }
        public static void Find2UniqueFromTwiceValues()
        {
            //List<int> A = [1, 2, 3, 1, 2, 4];
            //List<int> A = [1, 2];
            List<int> A = [2308, 1447, 1918, 1391, 2308, 216, 1391, 410, 1021, 537, 1825, 1021, 1729, 669, 216, 1825, 537, 1995, 805, 410, 805, 602, 1918, 1447, 90, 1995, 90, 1540, 1161, 1540, 2160, 1235, 1161, 602, 880, 2160, 1235, 669];//[880,1729]

            int ans = 0, position = 0;
            int n1 = 0, n2 = 0;

            foreach(int i in A)
            {
                ans ^= i;
            }

            for(int i = 0; i < 32; i++)
            {
                if((ans&(1 << i)) > 0)
                {
                    position = i;
                    break;
                }
            }

            for (int i = 0;i<A.Count;i++)
            {
                if ((A[i] &(1<<position)) > 0)
                {
                    n1 ^= A[i];
                } 
                else
                {
                    n2 ^= A[i];
                }
            }
            Console.WriteLine($"[{n1},{n2}]");
        }

        #region Sum of SubArray OR
        /// <summary>
        /// You are given an array of integers A of size N.
        /// he value of a subarray is defined as BITWISE OR of all elements in it.
        /// Return the sum of value of all subarrays of A % 109 + 7.
        /// Problem Constraints
        /// 1 <= N <= 10^5
        /// 1 <= A[i] <= 10^8
        /// </summary>
        public static void SubArrayORSum()
        {
            //List<int> A = [1, 2, 3, 4, 5];//71
            //List<int> A = [7, 8, 9, 10];//110
            //List<int> A = [347148,221001,394957,729925,276769,40726,552988,29952,184491,146773,418965,307,219145,183037,178111,81123,109199,683929,422034,346291,11434,7327,340473,316152,364005,359269,170935,105784,224044,22563,48561,165781,9329,357681,169473,175031,605611,374501,6607,329965,76068,836137,103041,486817,195549,107317,34399,56907,37477,189690,36796,376663,39721,177563,174179,183646,217729,408031,429122,631665,282941,526797,262186,306571,63613,57501,70685,226381,1338,9360,130360,20300,400906,87823,180349,108813,18181,119185,1,102611,63591,12889,311185,383896,8701,76077,75481,386017,153553,304913,383455,105948,142885,1,12610,137005,119185,16948,66171,123683];
            //579094379
            List<int> A = [68545, 260786, 1, 29565, 29695, 24193, 114797, 240479, 46076, 403900, 36502, 133043, 249601, 383845, 783681, 517539, 71023, 64414, 260785, 87097, 158803, 869131, 359079, 43321, 84617, 5269, 3961, 74089, 302933, 632476, 9799, 62305, 161839, 190323, 119680, 483133, 403789, 53401, 1, 20608, 285969, 9790, 353266, 1171, 23371, 125489, 63870, 29825, 148627, 150970, 101005, 591057, 13876, 222667, 389993, 362701, 67555, 94498, 473685, 220024, 364414, 194635, 297136, 40353, 525031, 552817, 315371, 23815, 10737, 194619, 56616, 4506, 9697, 30241, 100829, 200719, 367173, 335665, 21313, 62670, 15751, 34019, 72997, 592389, 1273, 513541, 29206, 714919, 593629, 273225, 861736, 428679, 7251, 339879, 81537, 199717, 11449, 266311, 721840, 147187];
            //823267307

            long ans = 0;
            long mod = 1000000007;
            long sacount = (A.Count * (A.Count + 1)) / 2;

            for (int i = 0; i < 32; i++)
            {
                long count = 0;
                long sasum = 0;
                for (int j = 0; j < A.Count; j++)
                {
                    if ((A[j] & (1 << i)) == 0)
                    {
                        count++;
                    }
                    else
                    {
                        sasum += (count * (count + 1)) / 2;
                        count = 0;
                    }
                }
                sasum += (count * (count + 1)) / 2;
                sasum = sacount - sasum;
                ans = (ans + (sasum * (1 << i))) % mod;
            }
            Console.WriteLine((int)ans);

            //for (int i = 0; i < A.Count; i++)
            //{
            //    long sum = 0;
            //    for (int j = i; j < A.Count; j++)
            //    {
            //        sum |= (long)A[j];
            //        ans += sum;
            //        ans %= mod;
            //    }
            //    //ans += sum;
            //}

            //Console.WriteLine((int)ans);
        } 
        #endregion
        public static void SingleElementThriceArray()
        {
            List<int> A = [1, 2, 4, 3, 3, 2, 2, 3, 1, 1];//4
            //List<int> A = [0, 0, 0, 1];//1

            int ans = 0;

            for(int i=0;i < 32;i++)
            {
                int count = 0;
                for(int j = 0; j < A.Count; j++)
                {
                    if ((A[j] &(1<<i)) > 0)
                    {
                        count++;
                    }
                }
                if (count % 3 == 1)
                {
                    ans |= (1 << i);
                }
            }
            Console.WriteLine(ans);
        }
        public static void MaxAnd()
        {
            //List<int> A = [38, 44, 84, 12];//36
            List<int> A = [53, 39, 88];//37
            int ans = 0;

            for (int i = 31; i >= 0; i--)
            {
                int count = 0;
                for (int e = 0; e < A.Count; e++)
                {
                    if ((A[e] & (1 << i)) > 0)
                    {
                        count++;
                    }
                }
                if (count > 1)
                {
                    ans |= (1 << i);

                    for (int j = 0; j < A.Count; j++)
                    {
                        if ((A[j] & (1 << i)) == 0){
                            A[j] = 0;
                        }
                    }
                }
            }
            Console.WriteLine(ans);
        }
    }
}
